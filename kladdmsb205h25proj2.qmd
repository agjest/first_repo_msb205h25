---
title: "Proj2 h25 msb205"
format: html
editor: visual
---

```{r}
#| label: setup
library(tidyverse)
library(sf)
library(rmapshaper)
library(tmap)
library(rnaturalearth)
options(
  paged.print = FALSE,
  digits = 4
)
```

```{r}
Norge_fylke <- read_sf("Norge_fylke.gpkg") %>% 
  ms_simplify(
    keep = 0.001,
    keep_shapes = TRUE
    )
```

```{r}
Norge_fylke |> 
  print(width = 70
        )
```

```{r}
Norge_fylke |> 
  ggplot() +
  geom_sf()
```

```{r}
p1 <- Norge_fylke %>% 
  select(fnr) %>%
  tm_shape() +
  tm_fill() +
  tm_borders() +
  tm_graticules(col = "gray90") +
  tm_title(
    text = "EPSG:4326 WGS 84",
    position = "top"
    ) +
  tm_compass(
    type = "8star",
    position = c("left", "top")
    ) +
  tm_scalebar(
    breaks = c(0, 100, 200), 
    text.size = 1
    )
```

```{r}
p2 <- Norge_fylke %>% 
  select(fnr) %>%
  st_transform(5972) %>% 
  tm_shape() +
  tm_fill() +
  tm_grid(col = "gray90") +
  tm_borders() +
  tm_title(
    text = "EPSG:5972\n
    ETRS89 / UTM zone 32 + NN2000 height",
    position = "top"
    ) +
  tm_compass(
    type = "8star",
    position = c("left", "top")
    ) +
  tm_scalebar(
    breaks = c(0, 100, 200),
    text.size = 1
    )
```

```{r}
p2
```

```{r}
p3 <- Norge_fylke %>% 
  select(fnr) %>%
  st_transform(5973) %>% 
  tm_shape() +
  tm_fill() +
  tm_grid(col = "gray90") +
  tm_borders() +
  tm_title(
    "EPSG:5973\n
    ETRS89 / UTM zone 33 + NN2000 height",
    position = "top"
    ) +
  tm_compass(
    type = "8star", 
    position = c("left", "top")
    ) +
  tm_scale_bar(
    breaks = c(0, 100, 200),
    text.size = 1
    )
```

```{r}
p4 <- Norge_fylke %>% 
  select(fnr) %>%
  st_transform(5975) %>% 
  tm_shape() +
  tm_fill() +
  tm_grid(col = "gray90") +
  tm_borders() +
  tm_title(
    "EPSG:5975\n 
    ETRS89 / UTM zone 35 + NN2000 height",
    position = "top"
    ) +
  tm_compass(
    type = "8star", 
    position = c("left", "top")) +
  tm_scalebar(
    breaks = c(0, 100, 200), 
    text.size = 1
    )
```

```{r}
#| warning: false
#| message: false
tmap_arrange(p1, p2, p3, p4)
```

```{r}
Norge_fylke %>% 
  select(fnr, navn) %>%
  st_transform(5972) %>%
  mutate(
    area = st_area(.),
    area_km2 = units::set_units(st_area(.), km^2)
  ) |> 
  select(navn, area, area_km2) |> 
  st_drop_geometry() |>  
  print(width = 75)
```

```{r}
Norge_fylke %>% 
  select(fnr, navn) %>%
  st_transform(5973) %>%
  mutate(
    area = st_area(.),
    area_km2 = units::set_units(st_area(.), km^2)
  ) |> 
  select(navn, area, area_km2) |> 
  st_drop_geometry() |> 
  print(width = 75)
```

```{r}
Norge_fylke %>% 
  select(fnr, navn) %>%
  st_transform(5975) %>%
  mutate(
    area = st_area(.),
    area_km2 = units::set_units(st_area(.), km^2)
  ) |> 
  select(navn, area, area_km2) |> 
  st_drop_geometry() |> 
  print(width = 75)
```

5972: 4060714721

5973; 4063333065

5975: 4137503896

```{r}
# query="SELECT * FROM Norge_fylke WHERE navn 
# IN ('Østfold', 'Akershus', 'Oslo', 'Hedmark', 'Oppland', 
# 'Buskerud', 'Vestfold', 'Telemark', 'Aust-Agder', 
# 'Vest-Agder', 'Rogaland', 'Hordaland', 'Sogn og Fjordane', 
# 'Møre og Romsdal', 'Sør-Trøndelag')")
# OR
Norge_fylke_syd <- read_sf(
  "Norge_fylke.gpkg",
  query = "SELECT * FROM Norge_fylke WHERE navn 
  NOT IN ('Nord-Trøndelag', 'Nordland',
  'Troms', 'Finnmark')") %>% 
  ms_simplify(
    keep = 0.01, keep_shapes = TRUE
    )
```

```{r}
Norge_fylke_syd |> 
  ggplot() +
  geom_sf()
```

```{r}
Norge_fylke_syd |> 
  st_transform(5972) |> 
  ggplot() +
  geom_sf() +
  coord_sf(datum = NULL)
```

```{r}
read_sf(
  "Norge_fylke.gpkg"
  ) %>% 
  ms_simplify(
    keep = 0.01, keep_shapes = TRUE
    ) |> 
  st_transform(5973) |> 
  ggplot() +
  geom_sf() +
  coord_sf(datum = NULL)
```

```{r}
Norge_fylke %>% 
  st_transform(5975) |> 
  ggplot() +
  geom_sf() +
  coord_sf(datum = NULL)
```

```{r}
# Rogaland
Norge_fylke_syd %>% 
  select(fnr, navn) %>%
  filter(fnr %in% c('10', '11', '12')) %>% 
  st_transform(5972) %>%
  mutate(
    area = st_area(.),
    area_km2 = units::set_units(st_area(.), km^2)
  ) |> 
  select(navn, area, area_km2) |> 
  st_drop_geometry()
```

## Projeksjoner for verden

```{r}
# read in world map from rnatrualearth
# The option returnclass = "sf" gives us an sf object
world_ne <- ne_countries(
  scale = "medium", 
  returnclass = "sf"
  ) |> 
  select(continent)
```

```{r}
world_ne |> 
  st_crs()
```

```{r}
#| warning: false
# følger epsg der 4326 har breddegrad som første koordinat
st_axis_order(authority_compliant = TRUE)
world_ne |> 
  st_transform(
      # have to swap the axis, gives a warning
    pipeline = "+proj=pipeline +step +proj=axisswap +order=2,1"
    ) %>%
  st_transform(3035) %>%
  plot()
```

```{r}
#| warning: false
# følger gis ingeniører
st_axis_order(authority_compliant = FALSE)
world_ne |> 
  st_transform(3035) %>%
  plot()
```

```{r}
st_axis_order(authority_compliant = FALSE)
world_ne |> 
  st_transform(3035) %>%
  ggplot() +
  geom_sf() +
   coord_sf(datum = NULL)
```

## Verdenskart

```{r}
# read in world map from rnatrualearth
# The option returnclass = "sf" gives us an sf object
world_ne <- ne_countries(
  scale = "medium", 
  returnclass = "sf"
  ) |> 
  select(continent)
```

```{r}
st_axis_order()
```

```{r}
world_ne |> 
  plot()
```

```{r}
world_ne |> 
  ggplot() +
  geom_sf(
    mapping = aes(fill = continent)
  )
```

```{r}
st_axis_order(authority_compliant = TRUE)
```

```{r}
world_ne |> 
  plot()
```

```{r}
world_ne |> 
  ggplot() +
  geom_sf(
    mapping = aes(fill = continent)
  )
```

```{r}
st_axis_order(authority_compliant = FALSE)
```

```{r}
world_ne |> 
  plot()
```

```{r}
st_axis_order(authority_compliant = TRUE)
```

```{r}
world_ne |> 
  st_transform(
      # have to swap the axis, gives a warning
    pipeline = "+proj=pipeline +step +proj=axisswap +order=2,1"
    ) %>%
  #st_transform(3035) %>%
  plot()
```

```{r}
world_ne |> 
  st_transform(
      # have to swap the axis, gives a warning
    pipeline = "+proj=pipeline +step +proj=axisswap +order=2,1"
    ) %>%
  #st_transform(3035) %>%
  ggplot() +
  geom_sf()
```

```{r}
st_axis_order(authority_compliant = FALSE)
```

## EPSG:3395

```{r}
world_ne %>% 
  st_transform("EPSG:3395") %>% 
  ggplot() +
  geom_sf(
    mapping = aes(fill = continent, colour = continent)
  ) +
  coord_sf(
    ylim = c(-12000000, 15000000), 
    datum = st_crs(3395),
    expand = FALSE
    )
```

```{r}
world_ne %>% st_transform("ESRI:54017") %>% 
  ggplot() + 
  geom_sf() +
  coord_sf(
    datum = st_crs("ESRI:54017"), 
    expand = FALSE
    )
```

```{r}
world_ne %>% 
  st_transform("EPSG:3857") %>% 
  ggplot() +
  geom_sf() +
  coord_sf(
    ylim = c(-1.3e+07, 2e+07), 
    datum = st_crs("EPSG:3857"), 
    expand = FALSE
    )
```

```{r}
map_54009 <- world_ne %>% 
  st_transform("ESRI:54009") %>% 
  ggplot() + 
  geom_sf() +
  coord_sf(
    datum = st_crs("ESRI:54009"), 
    expand = FALSE) +
  labs(title = "World Mollweide ESRI 54009")

map_54009
```

```{r}
world_ne %>%
  st_transform(3035) %>% 
  ggplot() +
  geom_sf(aes(fill = continent)) +
  coord_sf(crs = 3035)
```

```{r}
world_ne %>%
  st_transform(
    crs = "+proj=laea +x_0=0 +y_0=0 
    +lon_0=5.265393 
    +lat_0=59.425333",
    ) %>% 
  plot(key.pos = 1)
```

```{r}
world_ne %>%
  st_transform(
    crs = "+proj=laea +x_0=0 +y_0=0 
    +lon_0=-130.06 
    +lat_0=-25.04",
    ) %>% 
  plot(key.pos = 1)
```

## CRAN sites on Winkel triple projection

```{r}
st_axis_order(authority_compliant = FALSE)
```

```{r}
ne_countries(
  scale = "medium", returnclass = "sf")  %>% 
  select(continent) |> 
  ggplot() +
  geom_sf()
```

```{r}
crs_wintri <- "+proj=wintri 
  +datum=WGS84 + no_defs + over"
```

```{r}
world_wintri <- world_ne %>% 
  ms_simplify(
    keep = 0.25,# keep 25% of the points
    keep_shapes = TRUE) |> 
  lwgeom::st_transform_proj(
    crs = crs_wintri
    )
```

```{r}
world_wintri |> 
 plot()
```

```{r}
grat_wintri <- 
  st_graticule(
    lat = c(
      -89.9, 
      seq(-80, 80, 20), 
      89.9)
    ) %>%
  lwgeom::st_transform_proj(
    crs = crs_wintri
    ) 
```

```{r}
grat_wintri %>% 
  ggplot() + 
  geom_sf(
    color = "gray30", 
    size = 0.25/.pt
    ) + 
  coord_sf(datum = NULL)
```

```{r}
world_wintri %>% 
  ggplot() + 
  geom_sf(
    color = "gray30", 
    size = 0.25/.pt
    ) + 
  coord_sf(datum = NULL)

```

```{r}
# vectors of latitudes and longitudes 
# that go once around the 
# globe in 1-degree steps
lats <- c(90:-90, -90:90, 90)
longs <- c(
  rep(c(180, -180), each = 181), 
  180
  )
```

```{r}
# turn into correctly projected sf collection
wintri_outline <- 
  list(cbind(longs, lats)) %>%
  st_polygon() %>%
  st_sfc( # create sf geometry list column
    crs = "+proj=longlat +ellps=WGS84 
    +datum=WGS84 +no_defs"
  ) %>% 
  st_sf() %>%
  # transform to Winkel tripel
  lwgeom::st_transform_proj(crs = crs_wintri)
```

```{r}
ggplot() + 
  geom_sf(data = wintri_outline, 
          fill = "#56B4E950", 
          color = "grey30", 
          size = 0.5/.pt) +
  coord_sf(datum = NULL)
```

```{r}
final_winkel_world <- ggplot() + 
  geom_sf(
    data = wintri_outline, 
    fill = "#56B4E950", 
    color = "grey30", 
    size = 0.5/.pt
    ) +
  geom_sf(
    data = grat_wintri, 
    color = "gray30", 
    size = 0.25/.pt
    ) + 
  geom_sf(
    data = world_wintri, 
    aes(fill = continent), 
    color = "black", 
    size = 0.5/.pt
    ) +
  coord_sf(
    datum = NULL
    )

final_winkel_world
```

```{r}
#| eval: false
CRANmirrors <- getCRANmirrors(all = FALSE, local.only = FALSE) |> 
  filter(!str_detect(City, pattern = "0-Cloud.*")) |> 
  filter(!(City == "Worldwide" | Country == "Worldwide")) |> 
  as_tibble() %>% 
  # get long and lat for city, expencive operation
  # one city per second. Hence we save the result
  # Passing 82 addresses to the Nominatim single address geocoder
  # Query completed in: 83.2 seconds
  mutate(
    city_coord = tidygeocoder::geo(
      city = City,
      country = Country,
      method = "osm"
      )
  )

saveRDS(
  object = CRANmirrors,
  file = "./CRANmirrors.rds"
)
```

```{r}
getCRANmirrors(all = FALSE, local.only = FALSE) |> 
  filter(!str_detect(City, pattern = "0-Cloud.*")) |> 
  filter(!(City == "Worldwide" | Country == "Worldwide")) |> 
  as_tibble()
```

```{r}
# city_coord is list-column (tibble with 4 variables in CRANmirrors)
# we have to unnest it first
CRANmirrors <- CRANmirrors |> 
  unnest(cols = c(city_coord))
```

```{r}
CRANmirrors_sf <- CRANmirrors |> 
  # filter out greece, crete with no long lat
  filter(!is.na(long)) |> 
  st_as_sf(
    coords = c("long", "lat"), 
    # note that we don't follow authorities 
    crs = "4326"
    ) |> 
  lwgeom::st_transform_proj(crs = crs_wintri) |> 
  group_by(City) %>% 
  summarise(mirrors = as.character(n())) %>% 
  mutate(
    mirrors = factor(mirrors, levels = c("1", "2", "3"))
  ) 
```

```{r}
#| message: false
final_winkel_world +
  # add mirrors geom
  geom_sf(
    #data = Mirrors, 
    data = CRANmirrors_sf,
    mapping = aes(
      shape = mirrors
      ),
    colour = 'dark red'
    )  +
  # perhaps use 
  # geom_text_repel 
  # to name the cities 
  # with more 
  # than 1 mirror
  ggtitle(
    "Location of CRAN 
    mirrors"
    ) +
  coord_sf(datum = NULL)
```
